package relay;
import java.awt.Color;
import java.util.Random;
import java.util.concurrent.TimeUnit;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Trida slouzi k vytvoreni GUI pro ovladani prepinani rele
 * @author Ondřej Mejzlík
 */
public class Gui extends javax.swing.JFrame {

    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        randomSwitchingJPanel1 = new javax.swing.JPanel();
        randomSetJSlider2 = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        randomJTextField2 = new javax.swing.JTextField();
        randomStartJButton4 = new javax.swing.JButton();
        randomNotificationJLabel10 = new javax.swing.JLabel();
        randomLoopJCheckBox3 = new javax.swing.JCheckBox();
        timerJPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        timerLoopJCheckBox2 = new javax.swing.JCheckBox();
        timerStartJButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        timerNotificationJLabel11 = new javax.swing.JLabel();
        timerDisplayJLabel2 = new javax.swing.JLabel();
        timerJTextField1 = new javax.swing.JTextField();
        timerHoursJRadioButton1 = new javax.swing.JRadioButton();
        timerSecondsJRadioButton2 = new javax.swing.JRadioButton();
        timerMinutesJRadioButton3 = new javax.swing.JRadioButton();
        manualJPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        manualJButton1 = new javax.swing.JButton();
        manualNotificationJLabel11 = new javax.swing.JLabel();
        patternJPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patternInputJTextArea1 = new javax.swing.JTextArea();
        patternStartJButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        patternLoopJCheckBox1 = new javax.swing.JCheckBox();
        patternNotificationJLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Relay Controller");

        randomSetJSlider2.setMajorTickSpacing(29);
        randomSetJSlider2.setMaximum(30);
        randomSetJSlider2.setMinimum(1);
        randomSetJSlider2.setMinorTickSpacing(1);
        randomSetJSlider2.setPaintTicks(true);
        randomSetJSlider2.setSnapToTicks(true);
        randomSetJSlider2.setToolTipText("");
        randomSetJSlider2.setValue(5);
        randomSetJSlider2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                randomSetJSlider2MouseDragged(evt);
            }
        });

        jLabel8.setText("Flips the relay randomly choosing the delay from");

        jLabel9.setText("1 to the set value in seconds:");

        randomJTextField2.setColumns(3);
        randomJTextField2.setText("5");
        randomJTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                randomJTextField2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                randomJTextField2KeyReleased(evt);
            }
        });

        randomStartJButton4.setText("Start");
        randomStartJButton4.setSelected(true);
        randomStartJButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomStartJButton4ActionPerformed(evt);
            }
        });

        randomNotificationJLabel10.setForeground(new java.awt.Color(0, 204, 0));
        randomNotificationJLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        randomNotificationJLabel10.setText("STOPPED");

        randomLoopJCheckBox3.setText("Loop");

        javax.swing.GroupLayout randomSwitchingJPanel1Layout = new javax.swing.GroupLayout(randomSwitchingJPanel1);
        randomSwitchingJPanel1.setLayout(randomSwitchingJPanel1Layout);
        randomSwitchingJPanel1Layout.setHorizontalGroup(
            randomSwitchingJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomSwitchingJPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomSwitchingJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(randomSwitchingJPanel1Layout.createSequentialGroup()
                        .addComponent(randomSetJSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(randomJTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGroup(randomSwitchingJPanel1Layout.createSequentialGroup()
                        .addGroup(randomSwitchingJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(randomSwitchingJPanel1Layout.createSequentialGroup()
                                .addComponent(randomStartJButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(randomLoopJCheckBox3))
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(randomNotificationJLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        randomSwitchingJPanel1Layout.setVerticalGroup(
            randomSwitchingJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomSwitchingJPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(randomSwitchingJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(randomSetJSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomJTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(randomSwitchingJPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomStartJButton4)
                    .addComponent(randomLoopJCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(randomNotificationJLabel10)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Random switching", randomSwitchingJPanel1);

        timerJPanel2.setMaximumSize(new java.awt.Dimension(32775, 32775));
        timerJPanel2.setName(""); // NOI18N

        jLabel6.setText("Flips the relay when the timer goes off");

        timerLoopJCheckBox2.setText("Loop");

        timerStartJButton3.setText("Start");
        timerStartJButton3.setEnabled(false);
        timerStartJButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerStartJButton3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Wait:");

        timerNotificationJLabel11.setForeground(new java.awt.Color(0, 204, 0));
        timerNotificationJLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerNotificationJLabel11.setText("STOPPED");

        timerDisplayJLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        timerDisplayJLabel2.setForeground(new java.awt.Color(51, 51, 255));
        timerDisplayJLabel2.setText("0");

        timerJTextField1.setColumns(6);
        timerJTextField1.setText("0");
        timerJTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                timerJTextField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timerJTextField1KeyReleased(evt);
            }
        });

        buttonGroup1.add(timerHoursJRadioButton1);
        timerHoursJRadioButton1.setText("Hours");

        buttonGroup1.add(timerSecondsJRadioButton2);
        timerSecondsJRadioButton2.setSelected(true);
        timerSecondsJRadioButton2.setText("Seconds");
        timerSecondsJRadioButton2.setActionCommand("");

        buttonGroup1.add(timerMinutesJRadioButton3);
        timerMinutesJRadioButton3.setText("Minutes");

        javax.swing.GroupLayout timerJPanel2Layout = new javax.swing.GroupLayout(timerJPanel2);
        timerJPanel2.setLayout(timerJPanel2Layout);
        timerJPanel2Layout.setHorizontalGroup(
            timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerJPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timerNotificationJLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(timerJPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 85, Short.MAX_VALUE))
                    .addGroup(timerJPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(timerJPanel2Layout.createSequentialGroup()
                                .addComponent(timerStartJButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(timerLoopJCheckBox2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(timerJPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timerJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(timerSecondsJRadioButton2)
                                    .addComponent(timerMinutesJRadioButton3)
                                    .addComponent(timerHoursJRadioButton1))
                                .addGap(18, 18, 18)
                                .addComponent(timerDisplayJLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        timerJPanel2Layout.setVerticalGroup(
            timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timerJPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(timerJPanel2Layout.createSequentialGroup()
                        .addComponent(timerSecondsJRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timerMinutesJRadioButton3)
                            .addComponent(timerJTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timerHoursJRadioButton1))
                    .addComponent(timerDisplayJLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(timerJPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timerStartJButton3)
                    .addComponent(timerLoopJCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(timerNotificationJLabel11)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Timer", timerJPanel2);

        jLabel3.setText("Manual switch");

        manualJButton1.setText("Toggle opposite state");
        manualJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualJButton1ActionPerformed(evt);
            }
        });

        manualNotificationJLabel11.setForeground(new java.awt.Color(0, 204, 0));
        manualNotificationJLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        manualNotificationJLabel11.setText("STOPPED");

        javax.swing.GroupLayout manualJPanel3Layout = new javax.swing.GroupLayout(manualJPanel3);
        manualJPanel3.setLayout(manualJPanel3Layout);
        manualJPanel3Layout.setHorizontalGroup(
            manualJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualJPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manualJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manualJButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addGroup(manualJPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(manualNotificationJLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        manualJPanel3Layout.setVerticalGroup(
            manualJPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manualJPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(manualJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(manualNotificationJLabel11)
                .addContainerGap())
        );

        manualJButton1.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane2.addTab("Manual", manualJPanel3);

        jLabel4.setText("Flips the relay according to a pattern");

        patternInputJTextArea1.setColumns(20);
        patternInputJTextArea1.setLineWrap(true);
        patternInputJTextArea1.setRows(5);
        patternInputJTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                patternInputJTextArea1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patternInputJTextArea1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(patternInputJTextArea1);

        patternStartJButton2.setText("Start");
        patternStartJButton2.setEnabled(false);
        patternStartJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternStartJButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("1 - flip and wait 1s");

        jLabel5.setText("0 - wait 1s");

        patternLoopJCheckBox1.setText("Loop");
        patternLoopJCheckBox1.setActionCommand("");

        patternNotificationJLabel13.setForeground(new java.awt.Color(0, 204, 0));
        patternNotificationJLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        patternNotificationJLabel13.setText("STOPPED");
        patternNotificationJLabel13.setName(""); // NOI18N

        javax.swing.GroupLayout patternJPanel4Layout = new javax.swing.GroupLayout(patternJPanel4);
        patternJPanel4.setLayout(patternJPanel4Layout);
        patternJPanel4Layout.setHorizontalGroup(
            patternJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patternJPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(patternJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(patternJPanel4Layout.createSequentialGroup()
                        .addComponent(patternStartJButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patternLoopJCheckBox1))
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1)
                    .addComponent(patternNotificationJLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        patternJPanel4Layout.setVerticalGroup(
            patternJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patternJPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patternJPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patternStartJButton2)
                    .addComponent(patternLoopJCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(patternNotificationJLabel13)
                .addContainerGap())
        );

        patternNotificationJLabel13.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane2.addTab("Pattern", patternJPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void manualJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualJButton1ActionPerformed
        //Zastav vsechny prave probihajici akce programu pokud nejake probihaji
        if(runLock)
        {
            this.stopAll();
            //Prepni gui do zastaveneho rezimu
            runLock = false;
            this.changeState();
        }
        else
        {
            //Zablokuj tlacitko, povoli se az po vykonani prepnuti, zabranuje spatnemu prepinani
            manualJButton1.setEnabled(false);
            //Zaloz nove anonymni vlakno k prepnuti rele a uloz ho do nove promenne
            isFinished = new Thread(
            new Runnable() 
            //Anonymni trida noveho vlakna s metodou run        
            {
                @Override
                public void run() 
                {
                    try
                    {
                        //Oznam, ze rele se prepina
                        manualNotificationJLabel11.setForeground(Color.RED);
                        manualNotificationJLabel11.setText("SWITCHING");
                        //Vyckej 500ms, ochranne cekani, rele neumi spolehlive reagovat rychleji
                        TimeUnit.MILLISECONDS.sleep(500);
                        //Prepni rele
                        relayFlipper.flipRelay();
                        //Oznam, ze je hotovo a povol tlacitko
                        manualNotificationJLabel11.setForeground(new Color(0, 204, 0));
                        manualNotificationJLabel11.setText("READY");
                        manualJButton1.setEnabled(true);
                    }
                    catch (InterruptedException e)
                    {
                        
                    }
                }   
            });
        //Spust vlakno prepnuti
        isFinished.start();
        }
    }//GEN-LAST:event_manualJButton1ActionPerformed

    private void randomStartJButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomStartJButton4ActionPerformed
        //Prepni gui podle toho jestli nejaka funkce jiz bezi, popripade ji zastav
        this.runOrStop();
        //Vytvor vlakno pro hlidani nahodneho spinace a nasledne nahodny spinac
        if(runLock)
        {       
        //Zaloz nove anonymni vlakno ke sledovani ukonceni vlakna nahodneho spinace a uloz ho do nove promenne
        isFinished = new Thread(
            new Runnable() 
            //Anonymni trida noveho vlakna s metodou run        
            {
                @Override
                public void run() 
                {
                    //Pokud bylo preruseno vlakno sledovace, prerus i vlakno nahodneho spinace (zvenku to nelze udelat rovnou)
                    if(Thread.currentThread().isInterrupted())
                    {
                        exactTimer.interrupt(); 
                    }
                    //Vytvor nahodny spinac a predej mu parametry cykleni, meze, spinace rele a inicializovany generator nahodnych cisel
                    randomTimer = new RandomTimerThread(randomLoopJCheckBox3.isSelected(), Integer.parseInt(randomJTextField2.getText()), relayFlipper, randomNumberGenerator);
                    //Spust nahodny spinac takovym zpusobem, aby vnejsi vlakno cekalo na jeho dokonceni zatimco samo bezi v pozadi
                    randomTimer.run();
                    //nahodny spinac byl dokoncen. Prepni gui do zastaveneho rezimu
                    runLock = false; 
                    changeState();
                }
            });
        //Spust vlakno sledovace
        isFinished.start();
        }
    }//GEN-LAST:event_randomStartJButton4ActionPerformed

    private void timerStartJButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerStartJButton3ActionPerformed
        //Prepni gui podle toho jestli nejaka funkce jiz bezi, popripade ji zastav
        this.runOrStop();
        //Vytvor vlakno pro hlidani timeru a nasledne exact timer
        if(runLock)
        {       
        //Zaloz nove anonymni vlakno ke sledovani ukonceni vlakna timeru a uloz ho do nove promenne
        isFinished = new Thread(
            new Runnable() 
            //Anonymni trida noveho vlakna s metodou run        
            {
                @Override
                public void run() 
                {
                    //Pokud bylo preruseno vlakno sledovace, prerus i vlakno timeru (zvenku to nelze udelat rovnou)
                    if(Thread.currentThread().isInterrupted())
                    {
                        exactTimer.interrupt(); 
                    }
                    //Ziskej hodnotu zadanou v timeru
                    int time = Integer.parseInt(timerJTextField1.getText());
                    //Vytvor timer a predej mu parametry cykleni, casu a spinace rele
                    exactTimer = new ExactTimerThread(timerLoopJCheckBox2.isSelected(), time, relayFlipper, gui, getTimerSettings());
                    //Spust timer takovym zpusobem, aby vnejsi vlakno cekalo na jeho dokonceni zatimco samo bezi v pozadi
                    exactTimer.run();
                    //timer byl dokoncen. Prepni gui do zastaveneho rezimu
                    runLock = false; 
                    changeState();
                }
            });
        //Spust vlakno sledovace
        isFinished.start();
        }
    }//GEN-LAST:event_timerStartJButton3ActionPerformed

    private void patternStartJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternStartJButton2ActionPerformed
        //Prepni gui podle toho jestli nejaka funkce jiz bezi, popripade ji zastav
        this.runOrStop();
        //Vytvor vlakno pro hlidani pattern followeru a nasledne pattern follower
        if(runLock)
        {       
        //Zaloz nove anonymni vlakno ke sledovani ukonceni vlakna pattern followeru a uloz ho do nove promenne
        isFinished = new Thread(
            new Runnable() 
            //Anonymni trida noveho vlakna s metodou run        
            {
                @Override
                public void run() 
                {
                    //Pokud bylo preruseno vlakno sledovace, prerus i vlakno pattern followeru (zvenku to nelze udelat rovnou)
                    if(Thread.currentThread().isInterrupted())
                    {
                        patternFollower.interrupt(); 
                    }
                    //Vytvor pattern follower a predej mu parametry cykleni, vzorce a spinace rele
                    patternFollower = new PatternFollowerThread(patternLoopJCheckBox1.isSelected(), patternInputJTextArea1.getText(), relayFlipper);
                    //Spust pattern follower takovym zpusobem, aby vnejsi vlakno cekalo na jeho dokonceni zatimco samo bezi v pozadi
                    patternFollower.run();
                    //Pattern follower byl dokoncen. Prepni gui do zastaveneho rezimu
                    runLock = false; 
                    changeState();
                }
            });
        //Spust vlakno sledovace
        isFinished.start();
        }
    }//GEN-LAST:event_patternStartJButton2ActionPerformed

    private void randomSetJSlider2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_randomSetJSlider2MouseDragged
        //Ziskej hodnotu ze slideru nastaveni maximalni nahodne hodnoty a nastav ji do textoveho pole vedle nej
        this.randomJTextField2.setText(Integer.toString(this.randomSetJSlider2.getValue()));
    }//GEN-LAST:event_randomSetJSlider2MouseDragged

    private void patternInputJTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patternInputJTextArea1KeyReleased
        //Pokud je vzorec prazdny, znemozni zapnuti rele
        if(this.patternInputJTextArea1.getText().isEmpty())
        {
            this.patternStartJButton2.setEnabled(false);
            this.patternNotificationJLabel13.setText("Can not be empty");
            this.patternNotificationJLabel13.setForeground(Color.RED);
        }
        //Pokud ve vzorci je jiny znak nez 1 nebo 0, znemozni zapnuti rele
        else if(!this.patternInputJTextArea1.getText().matches("[01]*"))
        {
            this.patternStartJButton2.setEnabled(false);
            this.patternNotificationJLabel13.setText("Only characters 0,1");
            this.patternNotificationJLabel13.setForeground(Color.RED);
        }
        //Pokud je vzorec delsi jak 500 znaku, znemozni zapnuti rele
        else if(this.patternInputJTextArea1.getText().length() > 500)
        {
            this.patternStartJButton2.setEnabled(false);
            this.patternNotificationJLabel13.setText("Pattern too long, max 500 symbols");
            this.patternNotificationJLabel13.setForeground(Color.RED);
        }
        //Pokud je vzorec zapsany spravne, umozni zapnuti rele
        else
        {
            this.patternStartJButton2.setEnabled(true);
            this.patternNotificationJLabel13.setText("OK");
            this.patternNotificationJLabel13.setForeground(new Color(0, 204, 0));
        }
    }//GEN-LAST:event_patternInputJTextArea1KeyReleased

    private void timerJTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timerJTextField1KeyReleased
        this.checkTimerFields();
    }//GEN-LAST:event_timerJTextField1KeyReleased

    private void randomJTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_randomJTextField2KeyReleased
        //Pokud je radek prazdny, znemozni zapnuti rele
        if(randomJTextField2.getText().isEmpty())
        {
            this.randomStartJButton4.setEnabled(false);
            this.randomNotificationJLabel10.setText("Can not be empty");
            this.randomNotificationJLabel10.setForeground(Color.RED);
            //Posun slider na 0
            this.randomSetJSlider2.setValue(0);
        }
        //Pokud je zadany jiny znak, nez cislo
        else if(!randomJTextField2.getText().matches("[0-9]*"))
        {
            this.randomStartJButton4.setEnabled(false);
            this.randomNotificationJLabel10.setText("Only numbers allowed");
            this.randomNotificationJLabel10.setForeground(Color.RED);
        }
        //Pokud je zadana 0, znemozni zapnuti rele, uzivatel musi pouzit manualni prepinac
        else if(this.randomJTextField2.getText().equals("0"))
        {
            this.randomStartJButton4.setEnabled(false);
            this.randomNotificationJLabel10.setText("Use manual switch");
            this.randomNotificationJLabel10.setForeground(Color.RED);
        }
        //Pokud je cislo delsi jak 5 znaku, znemozni zapnuti rele
        else if(this.randomJTextField2.getText().length() > 5)
        {
            this.randomStartJButton4.setEnabled(false);
            this.randomNotificationJLabel10.setText("Too high value");
            this.randomNotificationJLabel10.setForeground(Color.RED);
        }
        //Pokud je vse spravne, umozni zapnuti rele
        else
        {
            //Preved udaj z radku na int, cimz se zbavime 0 na zacatku a opravenou hodnotu dej zpet do radku
            this.randomJTextField2.setText(Integer.toString(Integer.parseInt(randomJTextField2.getText())));
            //Signalizuj spravne zadani hodnot
            this.randomStartJButton4.setEnabled(true);
            this.randomNotificationJLabel10.setText("OK");
            this.randomNotificationJLabel10.setForeground(new Color(0, 204, 0));
            //Uprav pozici slideru podle zadane hodnoty
            this.randomSetJSlider2.setValue(Integer.parseInt(this.randomJTextField2.getText()));
        }
    }//GEN-LAST:event_randomJTextField2KeyReleased

    /**
     * Vypni tlacitko ke spusteni random prepinace pri kazdem zmacknuti klavesy, jelikoz program jinak ceka na jeji uvolneni a v teto
     * chvili muze dojit k nespravnemu spusteni programu
     * @param evt predany event zmacknuti klavesy
     */
    private void randomJTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_randomJTextField2KeyPressed
        this.randomStartJButton4.setEnabled(false); 
    }//GEN-LAST:event_randomJTextField2KeyPressed

    /**
     * Vypni tlacitko ke spusteni pattern prepinace pri kazdem zmacknuti klavesy, jelikoz program jinak ceka na jeji uvolneni a v teto
     * chvili muze dojit k nespravnemu spusteni programu
     * @param evt predany event zmacknuti klavesy
     */
    private void patternInputJTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patternInputJTextArea1KeyPressed
        this.patternStartJButton2.setEnabled(false);
    }//GEN-LAST:event_patternInputJTextArea1KeyPressed

    /**
     * Vypni tlacitko ke spusteni timer prepinace pri kazdem zmacknuti klavesy, jelikoz program jinak ceka na jeji uvolneni a v teto
     * chvili muze dojit k nespravnemu spusteni programu
     * @param evt predany event zmacknuti klavesy
     */
    private void timerJTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timerJTextField1KeyPressed
        this.timerStartJButton3.setEnabled(false);
    }//GEN-LAST:event_timerJTextField1KeyPressed

    /**
     * Vrati hodnotu podle nastaveni rozsahu timeru
     * @return 1 pro sekundy, 2 pro minuty, 3 pro hodiny
     */
    private int getTimerSettings()
    {
        if(timerSecondsJRadioButton2.isSelected())
        {
            return 1;
        }
        else if(timerMinutesJRadioButton3.isSelected())
        {
            return 2;
        }
        return 3;
    }
    
    /**
     * Nastavi cas na ukazatel zbyvajiciho casu
     * @param amount velikost casu k cekani
     */
    public void setDisplayedTime(int amount)
    {
        //Vyrob novy string a napln do nej text casu k cekani
        String time;
        time = Integer.toString(amount);
        this.timerDisplayJLabel2.setText(time);
    }
    
    /**
     * Zkontroluje spravnost udaju zapsanych v polich na karte timer.
     */
    private void checkTimerFields()
    {
        //Pokud je radek prazdny, znemozni zapnuti rele
        if(timerJTextField1.getText().isEmpty())
        {
            this.timerStartJButton3.setEnabled(false);
            this.timerNotificationJLabel11.setText("Can not be empty");
            this.timerNotificationJLabel11.setForeground(Color.RED);
            this.timerDisplayJLabel2.setText("-");
        }
        //Pokud je zadana 0, znemozni zapnuti, misto toho ma uzivatel pouzit manualni prepinac
        else if(timerJTextField1.getText().equals("0"))
        {
            this.timerStartJButton3.setEnabled(false);
            this.timerNotificationJLabel11.setText("Use manual switch");
            this.timerNotificationJLabel11.setForeground(Color.RED);
            this.timerDisplayJLabel2.setText("0");
        }
        //Pokud je v radku jiny znak nez cislice, znemozni zapnuti rele
        else if(!timerJTextField1.getText().matches("[0-9]*"))
        {
            this.timerStartJButton3.setEnabled(false);
            this.timerNotificationJLabel11.setText("Only numbers allowed");
            this.timerNotificationJLabel11.setForeground(Color.RED);
            this.timerDisplayJLabel2.setText("-");
        }
        //Pokud je udaj v radku delsi jak 4 znaky, znemozni zapnuti rele
        else if(timerJTextField1.getText().length() > 4)
        {
            this.timerStartJButton3.setEnabled(false);
            this.timerNotificationJLabel11.setText("Too high value");
            this.timerNotificationJLabel11.setForeground(Color.RED);
            this.timerDisplayJLabel2.setText("-");
        }
        //Pokud je udaj spravny, umozni zapnuti rele
        else
        {
            //Preved udaj z radku na int, cimz se zbavime 0 na zacatku a opravenou hodnotu dej zpet do radku
            this.timerJTextField1.setText(Integer.toString(Integer.parseInt(timerJTextField1.getText())));
            this.timerStartJButton3.setEnabled(true);
            this.timerNotificationJLabel11.setText("OK");
            this.timerNotificationJLabel11.setForeground(new Color(0, 204, 0));
            //Nastav zkontrolovany cas na display
            this.setDisplayedTime(Integer.parseInt(timerJTextField1.getText()));
        }
    }
    
    /**
     * Zkontroluje zda nejaka funkce jiz bezi. Pokud ano, vypne ji, protoze bylo zmacknuto dalsi tlacitko
     * a nechceme aby dve casti bezely zaroven. Dale zavole metodu pro upravu vzhledu gui. 
     * Pokud nic nebezi umozni rozbehnuti dalsi automaticke casti programu pomoci 
     * nastaveni promenne runLock na true, coz znamena zelenou pro dalsi beh a zaroven indikuje ze neco bezi.
     */
    private void runOrStop()
    {
        if(runLock)
        {
            this.stopAll();
            runLock = false;
            //Zmen text tlacitek a notifikaci 
            this.changeState();
        }
        else
        {
            runLock = true;
            //Zmen text tlacitek a notifikaci 
            this.changeState();
        }
    }
    
    /**
     * Zmeni notifikatory ve spodni casti okna a text tlacitek podle toho, 
     * zda je zapnuta nejaka automaticka cast programu. 
     */
    public void changeState()
    {
        //Pokud byla nejaka automaticka cast programu zapnuta a bezi, zmen podle toho notifikartory a tlacitka
        if(runLock)
        {
            randomNotificationJLabel10.setText("RUNNING");
            randomNotificationJLabel10.setForeground(Color.red);            
            timerNotificationJLabel11.setText("RUNNING");
            timerNotificationJLabel11.setForeground(Color.red);           
            patternNotificationJLabel13.setText("RUNNING");
            patternNotificationJLabel13.setForeground(Color.red);
            manualNotificationJLabel11.setText("RUNNING");
            manualNotificationJLabel11.setForeground(Color.red);
            randomStartJButton4.setText("Stop");
            timerStartJButton3.setText("Stop");
            patternStartJButton2.setText("Stop");
            manualJButton1.setText("Stop");
        }
        //Pokud bylo vse zastaveno, zmen podle toho notifikartory a tlacitka
        else
        {
            randomNotificationJLabel10.setText("STOPPED");
            randomNotificationJLabel10.setForeground(new Color(0, 204, 0));            
            timerNotificationJLabel11.setText("STOPPED");
            timerNotificationJLabel11.setForeground(new Color(0, 204, 0));           
            patternNotificationJLabel13.setText("STOPPED");
            patternNotificationJLabel13.setForeground(new Color(0, 204, 0));
            manualNotificationJLabel11.setText("STOPPED");
            manualNotificationJLabel11.setForeground(new Color(0, 204, 0));
            randomStartJButton4.setText("Start");
            timerStartJButton3.setText("Start");
            patternStartJButton2.setText("Start");
            manualJButton1.setText("Toggle opposite state");
        }
    }
    
    /**
     * Zastavi vsechny bezici akce programu.
     */
    public void stopAll() 
    {
        //Pokud nejaka automaticka cast programu bezi, zastav ji
        if(randomTimer != null)
        {
            //Zastavi vlakno nahodneho casovace. Uvnitr casovace prestane bezet cyklus opakovani akce
            randomTimer.interrupt();   
        }
        if(patternFollower != null)
        {
            //Zastav vlakno sledovace pattern followeru. Uvnitr sledovace dojde k zastaveni samotneho pattern followeru a nasledne se dokonci akce
            this.isFinished.interrupt();  
        }
        if(exactTimer != null)
        {
            //Zastav vlakno sledovace exact timeru. Uvnitr sledovace dojde k zastaveni samotneho exact timeru a nasledne se dokonci akce
            this.isFinished.interrupt();  
        }
        if(randomTimer != null)
        {
            //Zastav vlakno sledovace exact timeru. Uvnitr sledovace dojde k zastaveni samotneho exact timeru a nasledne se dokonci akce
            this.isFinished.interrupt();  
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
                //Vyrob nove okno
                gui = new Gui();
                //Okno nepujde zvetsit nebo zmensit
                gui.setResizable(false);
                //Okno se zobrazi uprostred monitoru
                gui.setLocationRelativeTo(null);
                //Zviditelni hotove okno
                gui.setVisible(true);
            }
        });
    }

    //Promenna pro vlakno nahodneho prepinace
    private Thread randomTimer;
    //Promenna pro vlakno sledovace vzoru
    private Thread patternFollower;
    //Promenna pro vlakno exact timeru
    private Thread exactTimer;
    //Vlakno sledovace dokonceni pattern threadu a timer threadu
    private Thread isFinished;
    //Indikator zapnuteho behu nejake automaticke casti programu
    boolean runLock = false;
    //Promenna pro tridu prepinace rele
    private RelayFlipper relayFlipper = new RelayFlipper();
    //Promenna pro toto gui aby bylo mozne predat ho timeru aby mohl prepisovat cas
    private static Gui gui;
    //Promenna pro generator nahodnych cisel s inicializaci, inicializace musi probehnout na zacatku a jednou aby cisla byla spravne nahodna
    private Random randomNumberGenerator = new Random();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton manualJButton1;
    private javax.swing.JPanel manualJPanel3;
    private javax.swing.JLabel manualNotificationJLabel11;
    private javax.swing.JTextArea patternInputJTextArea1;
    private javax.swing.JPanel patternJPanel4;
    private javax.swing.JCheckBox patternLoopJCheckBox1;
    private javax.swing.JLabel patternNotificationJLabel13;
    private javax.swing.JButton patternStartJButton2;
    private javax.swing.JTextField randomJTextField2;
    private javax.swing.JCheckBox randomLoopJCheckBox3;
    private javax.swing.JLabel randomNotificationJLabel10;
    private javax.swing.JSlider randomSetJSlider2;
    private javax.swing.JButton randomStartJButton4;
    private javax.swing.JPanel randomSwitchingJPanel1;
    private javax.swing.JLabel timerDisplayJLabel2;
    private javax.swing.JRadioButton timerHoursJRadioButton1;
    private javax.swing.JPanel timerJPanel2;
    private javax.swing.JTextField timerJTextField1;
    private javax.swing.JCheckBox timerLoopJCheckBox2;
    private javax.swing.JRadioButton timerMinutesJRadioButton3;
    private javax.swing.JLabel timerNotificationJLabel11;
    private javax.swing.JRadioButton timerSecondsJRadioButton2;
    private javax.swing.JButton timerStartJButton3;
    // End of variables declaration//GEN-END:variables
}
